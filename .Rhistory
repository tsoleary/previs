colnames(pro_pvals) <- c("Master.Protein.Accessions", "p-value")
protein_df <- as.data.frame(protein_table)
protein_df <- rownames_to_column(protein_df, "Master.Protein.Accessions")
protein_df <- full_join(protein_df, pro_pvals, by = "Master.Protein.Accessions")
# Warning - joining character vector and factor
protein_df$Master.Protein.Accessions <-
as.factor(protein_df$Master.Protein.Accessions)
# Minimum number of peptides for each protein group
min_pep <- 5
protein_df$peptides <- table(data$Master.Protein.Accessions)
protein_min <- filter(protein_df, protein_df$peptides >= min_pep)
# Converting Protein Accession to Gene Symbol ----------------------------------
gene_df <- read.csv('mouse_PD_accession_gene.csv')
# data
data$gene <- data$Master.Protein.Accessions
for (i in 1:nrow(data)){
num <- which(data$gene[i] == gene_df$Accession, TRUE)
if (length(num) == 1){
data$gene <- gsub(data$gene[i], gene_df$Gene[num], data$gene)
}
}
# protein_df
protein_df$gene <- protein_df$Master.Protein.Accessions
for (i in 1:nrow(protein_df)){
num <- which(protein_df$gene[i] == gene_df$Accession, TRUE)
if (length(num) == 1){
protein_df$gene <- gsub(protein_df$gene[i], gene_df$Gene[num], protein_df$gene)
}
}
# Remove outliers --------------------------------------------------------------
View(protein_df)
write.csv(protein_df)
?write.csv
write.csv(protein_df, file = "protein_first_pass.csv")
# Proteomic analysis: Data imported from Proteome Discoverer 2.2 ---------------
library(tidyverse)
setwd("C:/Users/PrevBeast/Documents/R/WT v KO mouse")
data_raw <- read.csv("WT vs KO_pep.csv")
# Normalization ----------------------------------------------------------------
# Median of each peptide for each group of data
median_group <- function (dat, col){
list <- NULL
for (i in 1:nrow(dat)){
temp <- median(as.numeric(dat[i, col], na.rm = TRUE))
list <- c(list, temp)
}
return(list)
}
ctrl_raw <- grep("Control", colnames(data_raw))
data$ctrl_raw_med <- median_group(data, ctrl_raw)
# Proteomic analysis: Data imported from Proteome Discoverer 2.2 ---------------
library(tidyverse)
setwd("C:/Users/PrevBeast/Documents/R/WT v KO mouse")
data_raw <- read.csv("WT vs KO_pep.csv")
# Normalization ----------------------------------------------------------------
# Median of each peptide for each group of data
median_group <- function (dat, col){
list <- NULL
for (i in 1:nrow(dat)){
temp <- median(as.numeric(dat[i, col], na.rm = TRUE))
list <- c(list, temp)
}
return(list)
}
ctrl_raw <- grep("Control", colnames(data_raw))
data_raw$ctrl_raw_med <- median_group(data_raw, ctrl_raw)
View(median_group)
View(data_raw)
# Proteomic analysis: Data imported from Proteome Discoverer 2.2 ---------------
library(tidyverse)
setwd("C:/Users/PrevBeast/Documents/R/WT v KO mouse")
data_raw <- read.csv("WT vs KO_pep.csv")
# Normalization ----------------------------------------------------------------
# Median of each peptide for each group of data
median_group <- function (dat, col){
list <- NULL
for (i in 1:nrow(dat)){
temp <- median(as.numeric(dat[i, col], na.rm = TRUE))
list <- c(list, temp)
}
return(list)
}
# Median of each peptide for each group of data
median_group <- function (dat, col){
list <- NULL
for (i in 1:nrow(dat)){
temp <- median(as.numeric(dat[i, col], na.rm = TRUE))
list <- c(list, temp)
}
return(list)
}
ctrl_raw <- grep("Control", colnames(data_raw))
data_raw$ctrl_raw_med <- median_group(data_raw, ctrl_raw)
# Proteomic analysis: Data imported from Proteome Discoverer 2.2 ---------------
library(tidyverse)
setwd("C:/Users/PrevBeast/Documents/R/WT v KO mouse")
data_raw <- read.csv("WT vs KO_pep.csv")
# Normalization ----------------------------------------------------------------
# Median of each peptide for each group of data
median_group <- function (dat, col){
list <- NULL
for (i in 1:nrow(dat)){
temp <- median(as.numeric(dat[i, col], na.rm = TRUE))
list <- c(list, temp)
}
return(list)
}
ctrl_raw <- grep("Control", colnames(data_raw))
data_raw$ctrl_raw_med <- median_group(data_raw, ctrl_raw)
# set the max number of peptides used in analysis
max_pep <- 15
data <-
tbl_df(data_raw) %>%
group_by(Master.Protein.Accessions) %>%
top_n(n = max_pep, wt = ctrl_raw_med)
# proteins used for normalization
norm_pro <- "B2RQQ1; Q91Z83"
norm_pep <- subset(data, data$Master.Protein.Accessions == norm_pro)
numeric_cols <- which(sapply(norm_pep, is.numeric) == TRUE)
raw_abun <- numeric_cols[-length(numeric_cols)]
norm_value <- sapply(norm_pep[, raw_abun], mean)
raw_abun_mat <- as.matrix(data[, raw_abun])
norm_abun <- t(t(raw_abun_mat)/norm_value)
colnames(norm_abun) <- paste(colnames(norm_abun), sep = "_", "norm")
norm_test <- as.data.frame(norm_abun)
data <- as_tibble(data)
data <- cbind(data, norm_test)
# Median, sd, & ratio of peptides ----------------------------------------------
group1 <- grep("Sample_norm", colnames(data))
ctrl <- grep("Control_norm", colnames(data))
data$group1_med <- median_group(data, group1)
data$ctrl_med <- median_group(data, ctrl)
View(data)
# Median of each peptide for each group of data
as_group <- function (dat, col, fun = median){
list <- NULL
for (i in 1:nrow(dat)){
temp <- fun(as.numeric(dat[i, col], na.rm = TRUE))
list <- c(list, temp)
}
return(list)
}
as_group(data, group1, fun = sd)
# Median of each peptide for each group of data
as_group <- function (dat, col, FUN = median){
list <- NULL
for (i in 1:nrow(dat)){
temp <- fun(as.numeric(dat[i, col], na.rm = TRUE))
list <- c(list, temp)
}
return(list)
}
data$group1_sd <- as_group(data, group1, FUN = sd)
data$ctrl_sd <- as_group(data, ctrl, FUN = sd)
data$group1_sd <- as_group(data, group1, sd)
data$group1_sd <- as_group(data, group1, fun = sd)
# Function applied to each peptide for a group of data with median as default
as_group <- function (dat, col, FUN = median){
list <- NULL
for (i in 1:nrow(dat)){
temp <- FUN(as.numeric(dat[i, col], na.rm = TRUE))
list <- c(list, temp)
}
return(list)
}
data$group1_sd <- as_group(data, group1, FUN = sd)
data$ctrl_sd <- as_group(data, ctrl, FUN = sd)
count_df <- function (dat, col){
list <- NULL
for (i in 1:nrow(dat)){
temp <- length(which(!is.na(dat[i, col])))
list <- c(list, temp)
}
return(list)
}
count_df(data, ctrl)
count_df(data, group1)
count_df <- function (dat, col){
list <- NULL
for (i in 1:nrow(dat)){
temp <- length(which(!is.na(dat[i, col]))) - 1
list <- c(list, temp)
}
return(list)
}
count_df(data, group1)
count_df(data, group1)
count_df(data, ctrl)
count_df <- function (dat, col, dup = 1){
list <- NULL
for (i in 1:nrow(dat)){
temp <- length(which(!is.na(dat[i, col])))
temp <- temp / dup
if(temp >= 1){
temp <- temp - 1
}
list <- c(list, temp)
}
return(list)
}
count_df(data, ctrl)
count_df(data, ctrl, dup = 3)
count_df(data, group1, dup = 3)
# Degrees of freedom
data$group1_df <- count_df(data, group1, dup = 3)
data$ctrl_df <- count_df(data, ctrl, dup = 3)
(data$ratio == NA)
data$ratio == NA
is.na(data$ratio)
?is.na
# Relative abundance ratio for each peptide
ratio <- group1_med / ctrl_med
data$ratio <- ratio
data$group1_med <- median_group(data, group1)
data$ctrl_med <- median_group(data, ctrl)
data$group1_sd <- as_group(data, group1, FUN = sd)
data$ctrl_sd <- as_group(data, ctrl, FUN = sd)
# Relative abundance ratio for each peptide
ratio <- group1_med / ctrl_med
data$ratio <- ratio
data$group1_med <- median_group(data, group1)
# Relative abundance ratio for each peptide
ratio <- data$group1_med / data$ctrl_med
data$ratio <- ratio
is.na(data$ratio)
temp <- data[!(is.na(data$ratio))]
temp <- data[!(is.na(data$ratio)),]
View(temp)
# Removing rows with NA values for the median
data <- data[!(is.na(data$ratio))]
# Removing rows with NA values for the median
data <- data[!(is.na(data$ratio)), ]
?which
gene_df <- read.csv('mouse_PD_accession_gene.csv')
MPA_to_gene <- function (dat, gene_dat){
dat$gene <- dat$Master.Protein.Accessions
for (i in 1:nrow(dat)){
temp <- which(dat$gene[i] == gene_dat$Accession, TRUE)
if (length(temp) == 1){
dat$gene <- gsub(dat$gene[i], gene_dat$Gen[temp], dat$gene)
}
}
}
gene_df <- read.csv('mouse_PD_accession_gene.csv')
mpa_to_gene <- function (dat, gene_dat){
dat$gene <- dat$Master.Protein.Accessions
for (i in 1:nrow(dat)){
temp <- which(dat$gene[i] == gene_dat$Accession, TRUE)
if (length(temp) == 1){
dat$gene <- gsub(dat$gene[i], gene_dat$Gen[temp], dat$gene)
}
}
}
mpa_to_gene(data, gene_df)
mpa_to_gene <- function (dat, gene_dat){
dat$gene <- dat$Master.Protein.Accessions
for (i in 1:nrow(dat)){
temp <- which(dat$gene[i] == gene_dat$Accession, TRUE)
if (length(temp) == 1){
dat$gene <- gsub(dat$gene[i], gene_dat$Gen[temp], dat$gene)
}
}
return(data$gene)
}
mpa_to_gene(data, gene_df)
mpa_to_gene <- function (dat, gene_dat){
dat$gene <- dat$Master.Protein.Accessions
for (i in 1:nrow(dat)){
temp <- which(dat$gene[i] == gene_dat$Accession, TRUE)
if (length(temp) == 1){
dat$gene <- gsub(dat$gene[i], gene_dat$Gen[temp], dat$gene)
}
}
return(dat$gene)
}
mpa_to_gene(data, gene_df)
data$gene <- mpa_to_gene(data, gene_df)
View(data)
data <- select(data, data$gene, everything(data))
# Relative abundance of each protein using top ionizers
as_group(data, ctrl_med, tapply)
# Relative abundance of each protein using top ionizers
as_group(data, ctrl_med, FUN = tapply)
abun_as_group <- function (dat, col, FUN = mean){
tapply(dat[, col],
dat$Master.Protein.Accessions,
FUN,
na.rm = TRUE)
}
abun_as_group(data, "ctrl_med")
protein$ctrl_med <- abun_as_group(data, "ctrl_med")
# Protein Averages -------------------------------------------------------------
protein <- NULL
protein$ctrl_med <- abun_as_group(data, "ctrl_med")
View(protein)
protein <- as.data.frame(abun_as_group(data, "ctrl_med"))
View(protein)
protein$ctrl_med <- as.data.frame(abun_as_group(data, "ctrl_med"))
# Relative abundance of each protein using top ionizers
protein_group <- function (dat, groups, FUN = mean){
for (col in groups){
temp <- tapply(dat[, col],
dat$Master.Protein.Accessions,
FUN,
na.rm = TRUE)
}
tab <- cbind(tab, temp)
colnames(tab) <- groups
}
# Data frame with only top few ionizing peptides
pep_top <- 3
data_top <-
tbl_df(data) %>%
group_by(Master.Protein.Accessions) %>%
top_n(n = pep_top, wt = ctrl_med) %>%
as.data.frame
protein_group(data_top, groups)
group_names <- c("group1_med", "ctrl_med")
protein_group(data_top, group_names)
# Relative abundance of each protein using top ionizers
protein_group <- function (dat, groups, FUN = mean){
tab <- NULL
for (col in groups){
temp <- tapply(dat[, col],
dat$Master.Protein.Accessions,
FUN,
na.rm = TRUE)
}
tab <- cbind(tab, temp)
colnames(tab) <- groups
}
group_names <- c("group1_med", "ctrl_med")
protein_group(data_top, group_names)
# Relative abundance of each protein using top ionizers
protein_group <- function (dat, groups, FUN = mean){
tab <- NULL
for (col in groups){
temp <- tapply(dat[, col],
dat$Master.Protein.Accessions,
FUN,
na.rm = TRUE)
}
tab <- cbind(tab, temp)
}
group_names <- c("group1_med", "ctrl_med")
protein_group(data_top, group_names)
# Relative abundance of each protein using top ionizers
protein_group <- function (dat, groups, FUN = mean){
tab <- NULL
for (col in groups){
temp <- tapply(dat[, col],
dat$Master.Protein.Accessions,
FUN,
na.rm = TRUE)
}
tab <- cbind(tab, temp)
}
group_names <- c("group1_med", "ctrl_med")
protein_group(data_top, group_names)
test <- protein_group(data_top, group_names)
View(test)
# Relative abundance of each protein using top ionizers
protein_group <- function (dat, groups, FUN = mean){
tab <- NULL
for (col in groups){
temp <- tapply(dat[, col],
dat$Master.Protein.Accessions,
FUN,
na.rm = TRUE)
}
tab <- cbind(tab, temp)
}
group_names <- c("group1_med", "ctrl_med")
test <- protein_group(data_top, group_names)
View(test)
colnames(test) <- group_names
View(temp)
# Relative abundance of each protein using top ionizers
protein_group <- function (dat, groups, FUN = mean){
tab <- NULL
for (col in groups){
temp <- tapply(dat[, col],
dat$Master.Protein.Accessions,
FUN,
na.rm = TRUE)
tab <- cbind(tab, temp)
}
tab %>% as.data.frame
}
group_names <- c("group1_med", "ctrl_med")
test <- protein_group(data_top, group_names)
View(test)
# Relative abundance of each protein using top ionizers
protein_group <- function (dat, groups, FUN = mean){
tab <- NULL
for (col in groups){
temp <- tapply(dat[, col],
dat$Master.Protein.Accessions,
FUN,
na.rm = TRUE)
tab <- cbind(tab, temp)
}
colnames(tab) <- groups
}
group_names <- c("group1_med", "ctrl_med")
test <- protein_group(data_top, group_names)
# Relative abundance of each protein using top ionizers
protein_group <- function (dat, groups, FUN = mean){
tab <- NULL
for (col in groups){
temp <- tapply(dat[, col],
dat$Master.Protein.Accessions,
FUN,
na.rm = TRUE)
tab <- cbind(tab, temp)
}
colnames(tab) <- groups
tab
}
# Relative abundance of each protein using top ionizers
protein_group <- function (dat, groups, FUN = mean){
tab <- NULL
for (col in groups){
temp <- tapply(dat[, col],
dat$Master.Protein.Accessions,
FUN,
na.rm = TRUE)
tab <- cbind(tab, temp)
}
colnames(tab) <- groups
print(tab)
}
protein_group(data_top, group_names)
protein <- protein_group(data_top, group_names)
View(abun_as_group)
View(abun_as_group)
View(as_group)
# Relative abundance of each protein using top ionizers
protein_group <- function (dat, groups, FUN = mean){
tab <- NULL
for (col in groups){
temp <- tapply(dat[, col],
dat$Master.Protein.Accessions,
FUN,
na.rm = TRUE)
tab <- cbind(tab, temp)
}
colnames(tab) <- groups
return(tab)
}
protein <- protein_group(data_top, group_names)
View(protein)
protein <- rownames_to_column(protein_df, "Master.Protein.Accessions")
protein <- rownames_to_column(protein, "Master.Protein.Accessions")
protein <- protein_group(data_top, group_names) %>% as.data.frame
protein <- rownames_to_column(protein, "Master.Protein.Accessions")
View(protein)
protein <- rownames_to_column(protein, "Master.Protein.Accessions") %>%
as.factor
protein <- protein_group(data_top, group_names) %>% as.data.frame
protein <- rownames_to_column(protein, "Master.Protein.Accessions") %>%
as.character
protein <- protein_group(data_top, group_names) %>%
as.data.frame %>%
rownames_to_column("Master.Protein.Accessions") %>%
as.character
data_top$group1_sd_df <- square_x_df(data_top, group1_sd, group1_df)
# Standard deviation of grouped relative abundance using top ionizers
square_x_df <- function (data, group_sd, group_df){
(data$group_sd)^2 * (data$group_df)
}
data_top$group1_sd_df <- square_x_df(data_top, group1_sd, group1_df)
# Standard deviation of grouped relative abundance using top ionizers
square_x_df <- function (dat, group_sd, group_df){
(dat$group_sd)^2 * (dat$group_df)
}
data_top$group1_sd_df <- square_x_df(data_top, group1_sd, group1_df)
square_x_df(data_top, group1_sd, group1_df)
# Standard deviation of grouped relative abundance using top ionizers
square_x_df <- function (dat, group_sd, group_df){
list <- NULL
list <- (dat$group_sd)^2 * (dat$group_df)
return(list)
}
square_x_df(data_top, group1_sd, group1_df)
data_top$group_sd)^2 * data_top$group_df
data_top$group_sd^2 * data_top$group_df
data_top$group_sd^2
# Data frame with only top few ionizing peptides
pep_top <- 3
data_top <-
tbl_df(data) %>%
group_by(Master.Protein.Accessions) %>%
top_n(n = pep_top, wt = ctrl_med) %>%
as.data.frame
data_top$group1_sd_df <- square_x_df(data_top, group1_sd, group1_df)
View(data_top)
data_top$group1_sd_df <- (data_top$group1_sd)^2 * (data_top$group1_df - 1)
data_top$ctrl_sd_df <- (data_top$ctrl_sd)^2 * (data_top$ctrl_df - 1)
# Standard deviation of grouped relative abundance using top ionizers
square_x_df <- function (dat, group_sd, group_df){
(dat$group_sd)^2 * (dat$group_df)
}
data_top$group1_sd_df <- square_x_df(data_top, group1_sd, group1_df)
data_top$group1_sd^2 * data_top$group1_df
# Standard deviation of grouped relative abundance using top ionizers
square_x_df <- function (dat, group_sd, group_df){
(dat[, group_sd])^2 * (dat[, group_df])
}
data_top$group1_sd_df <- square_x_df(data_top, group1_sd, group1_df)
data_top$group1_sd_df <- square_x_df(data_top, "group1_sd", "group1_df")
data_top$ctrl_sd_df <- square_x_df(data_top, "ctrl_sd", "ctrl_df")
